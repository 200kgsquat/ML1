import streamlit as st
import joblib
import pandas as pd
from sklearn.preprocessing import OrdinalEncoder
from pathlib import Path

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ pathlib
script_path = Path(__file__).resolve()
model_path = script_path.parent / 'best_model.pkl'

# –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å
try:
    model = joblib.load(model_path)
except ModuleNotFoundError as e:
    st.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–æ–¥—É–ª—å '{e.name}'. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ requirements.txt –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–ø–ª–æ–π.")
    st.stop()
except FileNotFoundError:
    st.error(f"‚ùå –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {model_path}")
    st.stop()
except Exception as e:
    st.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
    st.stop()

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.title("üéØ –ü—Ä–æ–≥–Ω–æ–∑ —Å–¥–∞—á–∏ —ç–∫–∑–∞–º–µ–Ω–∞")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞
def preprocess_data(df: pd.DataFrame) -> pd.DataFrame:
    df_processed = df.copy()
    df_processed['–°–æ–Ω –Ω–∞–∫–∞–Ω—É–Ω–µ'] = df_processed['–°–æ–Ω –Ω–∞–∫–∞–Ω—É–Ω–µ'].map({'–ù–µ—Ç': 0, '–î–∞': 1})
    df_processed['–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–≤ –Ω–∞–∫–∞–Ω—É–Ω–µ'] = df_processed['–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–≤ –Ω–∞–∫–∞–Ω—É–Ω–µ'].map({'0': 0, '1': 1, '2-3': 2, '4+': 3})

    encoder = OrdinalEncoder()
    encoded_cols = ['–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', '–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π', '–í—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏']
    df_processed[encoded_cols] = encoder.fit_transform(df_processed[encoded_cols])
    return df_processed

# –ó–∞–≥—Ä—É–∑–∫–∞ CSV —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª", type="csv")

if uploaded_file is not None:
    try:
        data = pd.read_csv(uploaded_file)
        required_columns = [
            '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è 1', '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è 2', '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è 3',
            '–°–æ–Ω –Ω–∞–∫–∞–Ω—É–Ω–µ', '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–≤ –Ω–∞–∫–∞–Ω—É–Ω–µ',
            '–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π', '–í—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏'
        ]
        if not all(col in data.columns for col in required_columns):
            st.error(f"–û—à–∏–±–∫–∞: –≤ —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–ª–æ–Ω–∫–∏: {required_columns}")
        else:
            st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            st.subheader("üìù –í–∞—à–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
            st.dataframe(data[required_columns], height=200)

            X = preprocess_data(data[required_columns])

            # üîç –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
            st.subheader("üîç –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑")
            selected_row = st.number_input(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞ (–æ—Ç 0 –¥–æ {len(X)-1}):", 0, len(X)-1, 0
            )
            row = X.iloc[[selected_row]]
            pred_single = model.predict(row)[0]
            prob_single = model.predict_proba(row)[0][1]
            if pred_single == 1:
                st.success(f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç {selected_row} **–°–î–ê–õ** —ç–∫–∑–∞–º–µ–Ω —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {prob_single:.2%}")
            else:
                st.error(f"‚ùå –°—Ç—É–¥–µ–Ω—Ç {selected_row} **–ù–ï –°–î–ê–õ** —ç–∫–∑–∞–º–µ–Ω —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {(1 - prob_single):.2%}")

            # üìä –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏
            st.subheader("üìä –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
            if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"):
                preds = model.predict(X)
                probs = model.predict_proba(X)[:, 1]
                results = pd.DataFrame({
                    '–°—Ç—É–¥–µ–Ω—Ç': list(range(len(X))),
                    '–ü—Ä–æ–≥–Ω–æ–∑': ['–°–î–ê–õ' if p == 1 else '–ù–ï –°–î–ê–õ' for p in preds],
                    '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å': [
                        f"{probs[i]:.2%}" if preds[i] == 1 else f"{(1 - probs[i]):.2%}"
                        for i in range(len(probs))
                    ]
                })

                st.dataframe(results, height=300)

                csv = results.to_csv(index=False).encode('utf-8')
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                    data=csv,
                    file_name="all_predictions.csv",
                    mime="text/csv"
                )

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
else:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞.")

import streamlit as st
import joblib
import pandas as pd
from sklearn.preprocessing import OrdinalEncoder
from pathlib import Path

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ pathlib
script_path = Path(__file__).resolve()        # –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Å–∫—Ä–∏–ø—Ç—É
model_path = script_path.parent / 'best_model.pkl'  # –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –º–æ–¥–µ–ª–∏

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏
if not model_path.is_file():
    st.error(f"‚ùå –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {model_path}")
    st.stop()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
model = joblib.load(model_path)

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.title("üéØ –ü—Ä–æ–≥–Ω–æ–∑ —Å–¥–∞—á–∏ —ç–∫–∑–∞–º–µ–Ω–∞")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞
def preprocess_data(df: pd.DataFrame) -> pd.DataFrame:
    df_processed = df.copy()

    # –ú–∞–ø–ø–∏–Ω–≥ –±–∏–Ω–∞—Ä–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    df_processed['–°–æ–Ω –Ω–∞–∫–∞–Ω—É–Ω–µ'] = df_processed['–°–æ–Ω –Ω–∞–∫–∞–Ω—É–Ω–µ'].map({'–ù–µ—Ç': 0, '–î–∞': 1})
    df_processed['–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–≤ –Ω–∞–∫–∞–Ω—É–Ω–µ'] = df_processed['–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–≤ –Ω–∞–∫–∞–Ω—É–Ω–µ'].map({
        '0': 0, '1': 1, '2-3': 2, '4+': 3
    })

    # OrdinalEncoder –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    encoder = OrdinalEncoder()
    encoded_cols = ['–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', '–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π', '–í—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏']
    df_processed[encoded_cols] = encoder.fit_transform(df_processed[encoded_cols])

    return df_processed

# –ó–∞–≥—Ä—É–∑–∫–∞ CSV —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª", type="csv")

if uploaded_file is not None:
    try:
        data = pd.read_csv(uploaded_file)
        required_columns = [
            '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è 1', '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è 2', '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è 3',
            '–°–æ–Ω –Ω–∞–∫–∞–Ω—É–Ω–µ', '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–≤ –Ω–∞–∫–∞–Ω—É–Ω–µ',
            '–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π', '–í—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏'
        ]

        if not all(col in data.columns for col in required_columns):
            st.error(f"–û—à–∏–±–∫–∞: –≤ —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–ª–æ–Ω–∫–∏: {required_columns}")
        else:
            st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            st.subheader("üìù –í–∞—à–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
            st.dataframe(data[required_columns])

            # –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
            X = preprocess_data(data[required_columns])

            # –í—ã–±–æ—Ä —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
            selected_row = st.number_input(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0):",
                min_value=0,
                max_value=len(X) - 1,
                value=0
            )
            row = X.iloc[[selected_row]]

            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            prediction = model.predict(row)[0]
            probability = model.predict_proba(row)[0][1]

            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞:")
            if prediction == 1:
                st.success(f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç **–°–î–ê–õ** —ç–∫–∑–∞–º–µ–Ω —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {probability:.2%}")
            else:
                st.error(f"‚ùå –°—Ç—É–¥–µ–Ω—Ç **–ù–ï –°–î–ê–õ** —ç–∫–∑–∞–º–µ–Ω —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {1 - probability:.2%}")

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
else:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞.")
